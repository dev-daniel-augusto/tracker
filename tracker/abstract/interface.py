import logging
import pandas as pd
import typing as t
from abc import ABC, abstractmethod


class AbstractTrackerInterface(ABC):

    def __init__(self, cols: t.Sequence[str])-> None: self.df = pd.DataFrame(columns=cols)
    def __str__(self): f'Tracker<[{self.df.shape[0]}:{self.errors}|{self.successes}]>'
    @abstractmethod
    def transform(self): ...
    @abstractmethod
    def error_dict(self): ...
    @abstractmethod
    def success_dict(self): ...
    @property
    def errors(self) -> int: ...
    @property
    def successes(self) -> int: ...
    @property
    def status(self) -> t.Tuple[int, int]: ...
    @property
    def errors_entries(self) -> pd.DataFrame: ...
    @property
    def successes_entries(self) -> pd.DataFrame: ...
    def summarize(self): ...
    def summarize_errors(self): ...
    def summarize_successes(self): ...
    def log_summary(self, logger: logging.Logger, **kwargs): ...
    def add_snapshot(self, **kwargs): ...
